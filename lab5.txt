*******************counter*********************
function counter(n) {
  let count = n;
  const interval = setInterval(() => {
    console.log(count);
    count--;
    if (count < 0) {
      clearInterval(interval);
    }
  }, 1000);
}
counter(5);
****************createCounter******************
function createCounter(n) {
  let count = n;
  let interval;

  return {
    start: function() {
      interval = setInterval(() => {
        console.log(count);
        count--;
        if (count < 0) {
          clearInterval(interval);
        }
      }, 1000);
    },
    pause: function() {
      clearInterval(interval);
    },
    stop: function() {
      clearInterval(interval);
      count = n;
    }
  };
}
let myCounter = createCounter(5);
myCounter.start(); // Запуск
// Пауза через 3 секунды
setTimeout(() => {
  myCounter.pause();
}, 3000);
// Продолжение через 2 секунды
setTimeout(() => {
  myCounter.start();
}, 5000);
// Остановка через 5 секунд
setTimeout(() => {
  myCounter.stop();
}, 10000);
***********************delay********************
function delay(N) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve();
    }, N * 1000);
  });
}
delay(5).then(() => {
  console.log('Сработало через 5 секунд');
});
*****************getFirstRepository*******************
function getFirstRepository(username) {
  return fetch(`https://api.github.com/users/${username}`)
    .then(response => response.json())
    .then(userData => {
      return fetch(userData.repos_url)
        .then(response => response.json())
        .then(reposData => {
          return reposData[0].name;
        });
    });
}
getFirstRepository('FortunaMAKSIM').then(firstRepoName => {
  console.log('Название первого репозитория:', firstRepoName);
});
**************async/await***********************
class HttpError extends Error {
    constructor(response) {
        super('${response.status} for ${response.url}');
        this.name = 'HttpError';
        this.response = response;
    }
}

async function loadJson(url) {
    let response = await fetch(url);
    if (response.status == 200) {
        return response.json();
    } else {
        throw new HttpError(response);
    }
}

async function getGithubUser() {
    let name = prompt("Введите логин?", "FortunaMAKSIM");
    try {
        let user = await loadJson('https://api.github.com/users/${name}');
        alert('Name: ${user.name}');
        return user;
    } catch (err) {
        if (err instanceof HttpError && err.response.status == 404) {
            alert("Такого пользователя не существует, пожалуйста, повторите ввод.");
            name = prompt("Введите логин?", "FortunaMAKSIM");
        } else {
            throw err;
        }
    }
}

getGithubUser();